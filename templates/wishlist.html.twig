{% extends "layout.html.twig" %}

{% block content %}
<div class="container my-5">
  <h2 class="mb-4">Mes Offres Favoris</h2>

  {% if offers|length > 0 %}
    <div class="row g-4">
      {% for offer in offers %}
        <div class="col-lg-4 col-md-6">
          <div class="job-description-box p-4 rounded-lg">
            <div class="job-content-box">
              <div class="job-inner-box">
                <div class="d-flex align-items-start">
                  <img
                    src="https://placehold.co/64x64"
                    alt="{{ offer.company }} logo"
                    class="w-12 h-12 rounded-lg object-contain bg-gray-50 me-3"
                    style="flex-shrink: 0; width: 64px; height: 64px;"
                  />
                  <div>
                    <h3 class="fw-semibold" style="font-size: 18px; color: #000000">
                      {{ offer.title }}
                    </h3>
                    <p class="text-primary font-medium" style="color: #8b5cf6 !important; font-weight: 500">
                      {{ offer.company }}
                    </p>

                    <div style="display: flex; flex-direction: column;">
                      <div style="display: flex; align-items: center; margin-bottom: 5px;">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-map-pin">
                          <path d="M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"></path>
                          <circle cx="12" cy="10" r="3"></circle>
                        </svg>
                        <span style="margin-left: 5px;">{{ offer.location }}</span>
                      </div>

                      <div style="display: flex; align-items: center; margin-bottom: 5px;">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-calendar">
                          <path d="M8 2v4"></path>
                          <path d="M16 2v4"></path>
                          <rect width="18" height="18" x="3" y="4" rx="2"></rect>
                          <path d="M3 10h18"></path>
                        </svg>
                        <span style="margin-left: 5px;">Publiée le {{ offer.createdAt|date('d/m/Y') }}</span>
                      </div>

                      <div style="display: flex; align-items: center;">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-badge">
                          <path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"/>
                        </svg>
                        <span style="margin-left: 5px;">{{ offer.skills }}</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div class="mt-4 pt-4" style="border-top: 1px solid #e5e7eb;"></div>

            <div class="d-flex justify-content-between" style="margin-top: 10px;">
              <!-- Bouton de postulation -->
                <button type="button" 
                      class="btn btn-hover" 
                      style="background-color: rgba(155, 135, 245, 0.1); color: #6b5cf6; font-weight: 500; padding: 0.5rem; border-radius: 0.375rem;"
                      data-bs-toggle="modal" 
                      data-bs-target="#applicationModal{{ offer.id }}">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-send me-2" style="color: #6b5cf6;">
                  <path d="M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11z"></path>
                  <path d="m21.854 2.147-10.94 10.939"></path>
                </svg>
                Postuler
              </button>

              <!-- Bouton Ajouter aux favoris (Wishlist) -->
              <button class="btn btn-hover ms-2 wishlist-btn"
                      data-offer-id="{{ offer.id }}"
                      data-is-in-wishlist="{{ app.user ? offer.isInWishlist(app.user.id) : false }}"
                      style="background-color: rgba(255, 0, 0, 0.1); color: #ff0000; font-weight: 500; padding: 0.5rem; border-radius: 0.375rem;">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-heart me-2" style="color: #ff0000;">
                  <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z" {% if offer.isInWishlist(app.user.id) %}fill="#ff0000"{% endif %}></path>
                </svg>
                Wishlist
              </button>
            </div>
          </div>

          <!-- Modal de candidature -->
          <!-- Modal de candidature (identique à la première page) -->
          <div class="modal fade" id="applicationModal{{ offer.id }}" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
              <div class="modal-content" style="border-radius: 0.5rem; border: 1px solid #e5e7eb;">
                <form action="{{ url_for('application.submit', {id: offer.id}) }}" method="post" enctype="multipart/form-data" id="applicationForm{{ offer.id }}">
                  <div class="modal-header" style="border-bottom: 1px solid #e5e7eb;">
                    <h5 class="modal-title fw-semibold" style="color: #000000;">
                      Postuler chez {{ offer.company }}
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>

                  <div class="modal-body py-4">
                    <!-- Champ CV -->
                    <div class="mb-4">
                      <label class="form-label d-block mb-2" style="color: #4b5563; font-weight: 500;">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-file-text me-1">
                          <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/>
                          <polyline points="14 2 14 8 20 8"/>
                          <line x1="16" x2="8" y1="13" y2="13"/>
                          <line x1="16" x2="8" y1="17" y2="17"/>
                          <line x1="10" x2="8" y1="9" y2="9"/>
                        </svg>
                        CV (PDF, max 2MB)
                      </label>
                      <input type="file" class="form-control" name="cv" accept=".pdf" required style="border: 1px solid #d1d5db; border-radius: 0.375rem; padding: 0.5rem;">
                      <div class="invalid-feedback cv-feedback" style="display: none;"></div>
                    </div>
                    
                    <!-- Champ Lettre de motivation -->
                    <div class="mb-2">
                      <label class="form-label d-block mb-2" style="color: #4b5563; font-weight: 500;">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-mail me-1">
                          <rect width="20" height="16" x="2" y="4" rx="2"/>
                          <path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"/>
                        </svg>
                        Lettre de motivation (PDF, max 2MB)
                      </label>
                      <input type="file" class="form-control" name="cover_letter" accept=".pdf" required style="border: 1px solid #d1d5db; border-radius: 0.375rem; padding: 0.5rem;">
                      <div class="invalid-feedback cover-letter-feedback" style="display: none;"></div>
                    </div>
                  </div>

                  <div class="modal-footer" style="border-top: 1px solid #e5e7eb;">
                    <button type="button" class="btn btn-hover" data-bs-dismiss="modal" 
                            style="background-color: rgba(155, 135, 245, 0.1); color: #6b5cf6; font-weight: 500; padding: 0.5rem 1rem; border-radius: 0.375rem;">
                      Annuler
                    </button>
                    <button type="submit" class="btn btn-hover submit-btn" id="submitBtn{{ offer.id }}"
                            style="background-color: #6b5cf6; color: white; font-weight: 500; padding: 0.5rem 1rem; border-radius: 0.375rem;">
                      <span class="btn-text">Envoyer ma candidature</span>
                      <span class="spinner-border spinner-border-sm d-none" role="status"></span>
                    </button>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>
      {% endfor %}
    </div>
  {% else %}
    <div class="alert alert-info" role="alert">
      Vous n'avez aucune offre sauvegardée.
    </div>
  {% endif %}
</div>
<script>
document.addEventListener("DOMContentLoaded", function () {
    // 1. Initialisation des toasts
    const initToasts = () => {
        if (!document.getElementById('toast-container')) {
            const toastContainer = document.createElement('div');
            toastContainer.id = 'toast-container';
            toastContainer.className = 'position-fixed bottom-0 end-0 p-3';
            toastContainer.style.zIndex = '1100';
            document.body.appendChild(toastContainer);
        }
    };

    // 2. Fonction pour afficher un toast
    const showToast = (message, type = 'success') => {
        const toastEl = document.createElement('div');
        toastEl.className = `toast show align-items-center text-white bg-${type}`;
        toastEl.innerHTML = `
            <div class="d-flex">
                <div class="toast-body">${message}</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        `;
        document.getElementById('toast-container').appendChild(toastEl);
        setTimeout(() => toastEl.remove(), 5000);
    };

    // 3. Vérifier si l'utilisateur a déjà postulé
    const checkApplicationStatus = async (offerId, submitBtn) => {
        try {
            const response = await fetch(`/applications/check/${offerId}`, {
                headers: { 'X-Requested-With': 'XMLHttpRequest' },
                credentials: 'include'
            });

            if (response.ok) {
                const result = await response.json();
                const btnText = submitBtn.querySelector('.btn-text');

                if (result.hasApplied) {
                    submitBtn.disabled = true;
                    btnText.textContent = 'Déjà postulé';
                    submitBtn.style.opacity = '0.7';
                }
            }
        } catch (error) {
            console.error('Erreur vérification candidature:', error);
        }
    };

    // 4. Gestion des soumissions de candidature
    const setupApplicationForms = () => {
        document.querySelectorAll('[id^="applicationForm"]').forEach(form => {
            const offerId = form.id.replace('applicationForm', '');
            const submitBtn = form.querySelector('.submit-btn');

            // Vérifier si l'utilisateur a déjà postulé
            checkApplicationStatus(offerId, submitBtn);

            form.addEventListener('submit', async function (e) {
                e.preventDefault();

                const btnText = submitBtn.querySelector('.btn-text');
                const spinner = submitBtn.querySelector('.spinner-border');

                // Afficher le chargement
                submitBtn.disabled = true;
                btnText.textContent = 'Envoi en cours...';
                spinner.classList.remove('d-none');

                try {
                    const formData = new FormData(this);
                    const response = await fetch(this.action, {
                        method: 'POST',
                        body: formData,
                        headers: { 'X-Requested-With': 'XMLHttpRequest' }
                    });

                    const result = await response.json();

                    if (response.ok) {
                        showToast('Candidature envoyée avec succès !', 'success');

                        // Désactiver le bouton après succès
                        submitBtn.disabled = true;
                        btnText.textContent = 'Déjà postulé';
                        submitBtn.style.opacity = '0.7';

                        // Fermer le modal après 1,5 seconde
                        const modal = bootstrap.Modal.getInstance(this.closest('.modal'));
                        setTimeout(() => modal.hide(), 1500);
                    } else {
                        showToast(result.error || 'Erreur lors de la candidature', 'danger');
                        submitBtn.disabled = false;
                        btnText.textContent = 'Envoyer ma candidature';
                    }
                } catch (error) {
                    showToast('Erreur réseau', 'danger');
                    console.error(error);
                    submitBtn.disabled = false;
                    btnText.textContent = 'Envoyer ma candidature';
                } finally {
                    spinner.classList.add('d-none');
                }
            });
        });
    };

    // 5. Gestion des boutons wishlist
    const setupWishlistButtons = () => {
        document.querySelectorAll(".wishlist-btn").forEach(button => {
            button.addEventListener("click", async function () {
                const offerId = this.getAttribute("data-offer-id");
                const isCurrentlyActive = this.getAttribute("data-is-in-wishlist") === 'true';

                try {
                    this.disabled = true;

                    const response = await fetch(`/wishlist/toggle/${offerId}`, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "X-Requested-With": "XMLHttpRequest"
                        },
                        credentials: 'include'
                    });

                    if (!response.ok) throw new Error(`Erreur serveur: ${response.status}`);

                    const result = await response.json();
                    const icon = this.querySelector("svg path");

                    if (result.action === 'added') {
                        icon.setAttribute("fill", "#ff0000");
                        this.style.backgroundColor = "rgba(255, 0, 0, 0.3)";
                        this.setAttribute("data-is-in-wishlist", "true");
                    } else {
                        icon.removeAttribute("fill");
                        this.style.backgroundColor = "rgba(255, 0, 0, 0.1)";
                        this.setAttribute("data-is-in-wishlist", "false");
                    }

                    showToast(result.action === 'added'
                        ? 'Ajouté à votre wishlist'
                        : 'Retiré de votre wishlist',
                        'success');

                } catch (error) {
                    console.error("Erreur:", error);
                    showToast(error.message || 'Erreur lors de la mise à jour', 'danger');
                } finally {
                    this.disabled = false;
                }
            });
        });
    };

    // Initialisation
    initToasts();
    setupApplicationForms();
    setupWishlistButtons();
});
</script>
{% include 'footer.html.twig' %}
{% endblock %}
